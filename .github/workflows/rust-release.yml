name: Build and Package

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build and Package (${{ matrix.os }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      # -----------------------------
      # üß∞ Checkout and Setup
      # -----------------------------
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # -----------------------------
      # ‚öôÔ∏è Build Binary
      # -----------------------------
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare dist folder
        run: mkdir -p dist

      - name: Copy and strip binary
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/secure_delete dist/
          strip dist/secure_delete || true

      - name: Copy Windows binary
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\secure_delete.exe dist\

      # -----------------------------
      # üì¶ Package Zip
      # -----------------------------
      - name: Package zip
        run: |
          mkdir -p dist
          BINARY_PATH="$(pwd)/target/${{ matrix.target }}/release"
          cd dist
          
          if [ "$RUNNER_OS" = "Windows" ]; then
            zipname="secure_delete-windows.zip"
            pwsh -Command "Compress-Archive -Path '${BINARY_PATH}\\secure_delete.exe' -DestinationPath '${PWD}\\${zipname}'"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            zipname="secure_delete-macos.zip"
            zip -j "$zipname" "$BINARY_PATH/secure_delete"
          else
            zipname="secure_delete-linux.zip"
            zip -j "$zipname" "$BINARY_PATH/secure_delete"
          fi
          
          echo "ZIP_NAME=$zipname" >> $GITHUB_ENV

      # -----------------------------
      # üîê SHA256 Checksum
      # -----------------------------
      - name: Generate SHA256 checksum
        run: |
          cd dist
          sha256sum "$ZIP_NAME" > "${ZIP_NAME%.zip}.sha256"

      # -----------------------------
      # üîè Import and Use GPG
      # -----------------------------
      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --quick-set-expire $(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}') 1y

      - name: Sign artifacts (binary + checksum)
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd dist
          gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --detach-sign "$ZIP_NAME"
          gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --detach-sign "${ZIP_NAME%.zip}.sha256"

      # -----------------------------
      # üöÄ Upload Artifacts
      # -----------------------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/${{ env.ZIP_NAME }}
            dist/${{ env.ZIP_NAME }}.sig
            dist/${{ env.ZIP_NAME%.zip}}.sha256
            dist/${{ env.ZIP_NAME%.zip}}.sha256.sig
