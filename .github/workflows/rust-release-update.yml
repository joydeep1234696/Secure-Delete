name: Build and Release

on:
  workflow_dispatch:        # manual trigger will appear again
  push:
    tags:
      - 'v*.*.*'            # trigger on semantic version tags

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build and Package (${{ matrix.os }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifacts
        run: |
          mkdir -p dist
          BIN="target/${{ matrix.target }}/release/secure_delete${{ matrix.suffix == 'windows' && '.exe' || '' }}"
          OUT="dist/secure_delete-${{ matrix.suffix }}${{ matrix.suffix == 'windows' && '.exe' || '' }}"
          cp "$BIN" "$OUT"
          ls -lh dist

      - name: Ensure zip utility is available
        shell: bash
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            echo "Installing zip..."
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              sudo apt-get update && sudo apt-get install -y zip
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              brew install zip || true
            elif [[ "${{ runner.os }}" == "Windows" ]]; then
              choco install zip -y || true
            fi
          fi

      - name: Package binaries
        shell: bash
        run: |
          cd dist
          zip -r "secure_delete-${{ matrix.suffix }}.zip" ./*

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd dist
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 "secure_delete-${{ matrix.suffix }}.zip" > "secure_delete-${{ matrix.suffix }}.sha256"
          else
            sha256sum "secure_delete-${{ matrix.suffix }}.zip" > "secure_delete-${{ matrix.suffix }}.sha256"
          fi

      - name: Import GPG key (if provided)
        shell: bash
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [[ -n "$GPG_PRIVATE_KEY" ]]; then
            echo "$GPG_PRIVATE_KEY" | gpg --batch --import || echo "No valid GPG key data found."
          else
            echo "No GPG key provided, skipping import."
          fi

      - name: Sign checksum with GPG (if key provided)
        shell: bash
        run: |
          cd dist
          if gpg --list-secret-keys | grep -q .; then
            gpg --armor --detach-sign --output "secure_delete-${{ matrix.suffix }}.sha256.asc" "secure_delete-${{ matrix.suffix }}.sha256"
          else
            echo "No GPG keys available â€” skipping signature."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secure_delete-${{ matrix.suffix }}
          path: dist/*

  release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Display artifact contents
        run: ls -R release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_artifacts/**/*.zip
            release_artifacts/**/*.sha256
            release_artifacts/**/*.asc
          generate_release_notes: true
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
