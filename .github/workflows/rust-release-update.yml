name: Build and Release (Cross-Platform)

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "Cargo.toml"
  workflow_dispatch:

jobs:
  build:
    name: Build and Package (${{ matrix.os }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            BIN="target/${{ matrix.target }}/release/secure_delete.exe"
            OUT="dist/secure_delete-windows.exe"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            BIN="target/${{ matrix.target }}/release/secure_delete"
            OUT="dist/secure_delete-macos"
          else
            BIN="target/${{ matrix.target }}/release/secure_delete"
            OUT="dist/secure_delete-linux"
          fi
          cp "$BIN" "$OUT"
          ls -lh dist

      - name: Install zip utility if missing
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            choco install zip -y
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install zip || true
          else
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Determine OS suffix
        id: os_suffix
        shell: bash
        run: |
          case "${{ runner.os }}" in
            "Windows")
              echo "SUFFIX=windows" >> $GITHUB_ENV ;;
            "macOS")
              echo "SUFFIX=macos" >> $GITHUB_ENV ;;
            *)
              echo "SUFFIX=linux" >> $GITHUB_ENV ;;
          esac

      - name: Package binaries
        shell: bash
        run: |
          cd dist
          ZIP_FILE="secure_delete-${SUFFIX}.zip"
          zip -j "$ZIP_FILE" ./* || true
          ls -lh

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 256 *.zip > secure_delete-${SUFFIX}.sha256
          else
            sha256sum *.zip > secure_delete-${SUFFIX}.sha256
          fi
          cat *.sha256

      - name: Import GPG key (if provided)
        if: env.GPG_PRIVATE_KEY != ''
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign checksum with GPG
        if: env.GPG_PRIVATE_KEY != ''
        shell: bash
        run: |
          cd dist
          for f in *.sha256; do
            gpg --batch --yes --armor --detach-sign "$f"
          done
          ls -lh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secure_delete-${{ env.SUFFIX }}
          path: dist/*

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Display artifact contents
        run: ls -R release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Secure Delete â€“ Auto Build ${{ github.run_number }}"
          tag_name: "build-${{ github.sha }}"
          body: |
            ðŸ§° **Automated Cross-Platform Release**

            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Build: ${{ github.run_number }}

            This release includes binaries for:
            - Windows (MSVC)
            - macOS (Darwin)
            - Linux (GNU)

            SHA256 and GPG signatures included.
          files: |
            release_artifacts/**/*.zip
            release_artifacts/**/*.sha256
            release_artifacts/**/*.asc
          generate_release_notes: true
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
